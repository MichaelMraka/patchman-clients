/*
 * Insights Host Inventory REST Interface
 *
 * REST interface for the Insights Platform Host Inventory application.
 *
 * API version: 1.0.0
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package inventory

import (
	"encoding/json"
)

// CreateCheckIn Data required to create a check-in record for a host.
type CreateCheckIn struct {
	// A set of string facts about a host.
	CanonicalFacts map[string]interface{} `json:"canonical_facts"`
	// Defines how far in the future the host becomes stale (in minutes).
	CheckinFrequency *int32 `json:"checkin_frequency,omitempty"`
}

// NewCreateCheckIn instantiates a new CreateCheckIn object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCreateCheckIn(canonicalFacts map[string]interface{}, ) *CreateCheckIn {
	this := CreateCheckIn{}
	this.CanonicalFacts = canonicalFacts
	var checkinFrequency int32 = 1440
	this.CheckinFrequency = &checkinFrequency
	return &this
}

// NewCreateCheckInWithDefaults instantiates a new CreateCheckIn object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCreateCheckInWithDefaults() *CreateCheckIn {
	this := CreateCheckIn{}
	var checkinFrequency int32 = 1440
	this.CheckinFrequency = &checkinFrequency
	return &this
}

// GetCanonicalFacts returns the CanonicalFacts field value
func (o *CreateCheckIn) GetCanonicalFacts() map[string]interface{} {
	if o == nil  {
		var ret map[string]interface{}
		return ret
	}

	return o.CanonicalFacts
}

// GetCanonicalFactsOk returns a tuple with the CanonicalFacts field value
// and a boolean to check if the value has been set.
func (o *CreateCheckIn) GetCanonicalFactsOk() (*map[string]interface{}, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.CanonicalFacts, true
}

// SetCanonicalFacts sets field value
func (o *CreateCheckIn) SetCanonicalFacts(v map[string]interface{}) {
	o.CanonicalFacts = v
}

// GetCheckinFrequency returns the CheckinFrequency field value if set, zero value otherwise.
func (o *CreateCheckIn) GetCheckinFrequency() int32 {
	if o == nil || o.CheckinFrequency == nil {
		var ret int32
		return ret
	}
	return *o.CheckinFrequency
}

// GetCheckinFrequencyOk returns a tuple with the CheckinFrequency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CreateCheckIn) GetCheckinFrequencyOk() (*int32, bool) {
	if o == nil || o.CheckinFrequency == nil {
		return nil, false
	}
	return o.CheckinFrequency, true
}

// HasCheckinFrequency returns a boolean if a field has been set.
func (o *CreateCheckIn) HasCheckinFrequency() bool {
	if o != nil && o.CheckinFrequency != nil {
		return true
	}

	return false
}

// SetCheckinFrequency gets a reference to the given int32 and assigns it to the CheckinFrequency field.
func (o *CreateCheckIn) SetCheckinFrequency(v int32) {
	o.CheckinFrequency = &v
}

func (o CreateCheckIn) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["canonical_facts"] = o.CanonicalFacts
	}
	if o.CheckinFrequency != nil {
		toSerialize["checkin_frequency"] = o.CheckinFrequency
	}
	return json.Marshal(toSerialize)
}

type NullableCreateCheckIn struct {
	value *CreateCheckIn
	isSet bool
}

func (v NullableCreateCheckIn) Get() *CreateCheckIn {
	return v.value
}

func (v *NullableCreateCheckIn) Set(val *CreateCheckIn) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateCheckIn) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateCheckIn) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateCheckIn(val *CreateCheckIn) *NullableCreateCheckIn {
	return &NullableCreateCheckIn{value: val, isSet: true}
}

func (v NullableCreateCheckIn) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateCheckIn) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


